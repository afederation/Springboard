import luigi
from time import sleep

class HelloTask(luigi.Task):
	def run(self):
		sleep(60)
		with open('hello.txt', 'w') as hello_file:

			'''
			benefit of a with statment:
			no matter what, the file will close after this code block
			'''

			hello_file.write('Hello')
			hello_file.close()

	def output(self):
		return luigi.LocalTarget('hello.txt')

class WorldTask(luigi.Task):
	def run(self):
		sleep(30)
		with open('world.txt', 'w') as world_file:

			'''
			benefit of a with statment:
			no matter what, the file will close after this code block
			'''

			world_file.write('World')
			world_file.close()

	def output(self):
		return luigi.LocalTarget('world.txt')


class HelloWorldTask(luigi.Task):
	def run(self):

		with open('hello.txt', 'r') as hello_file:
			hello = hello_file.read()
		with open('world.txt', 'r') as world_file:
			world = world_file.read()
		with open('hello_world.txt', 'w') as output_file:
			content = f'{hello} {world}'
			output_file.write(content)
			output_file.close()

	def output(self):
		path = f'./results/{id}/hello_world.txt'
		return luigi.LocalTarget(path)

	def requires(self):
		return [HelloTask(
			f'./results/{id}/hello.txt'
			), 
				WorldTask(
			f'./results/{id}/world.txt'
			)
				]

	id = luigi.Parameter(default = 'test')


if __name__ == '__main__':
	luigi.run()

